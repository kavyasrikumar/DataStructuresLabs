public class LinearProbingHashTable<TKey, TValue> {
    
    private int size;
    
    private TKey[] keys;
    
    private TValue[] values;
    
    public LinearProbingHashTable(int initialCapacity) {
        size = 0;
        keys = (TKey[]) new Object[initialCapacity];
        values = (TValue[]) new Object[initialCapacity];
    }
    
    public void put(TKey key, TValue value) {
        
        if ((size + 1) >= (keys.length / 2)){
            resize(keys.length * 2);
        }
        
        boolean contains = false;
        int keyHashCode = Math.abs (key.hashCode());

        keyHashCode %= keys.length;
        
        if (keys[keyHashCode] != null){
            
            for (int i = keyHashCode; i < (keys.length + keyHashCode) && (contains == false); i++) {
                
                if (keys [i % keys.length] == null) {
                    // key does not exist, insert it
                    //
                    keys [i % keys.length] = key;
                    values [i % keys.length] = value;
                    size++;
                    
                    contains = true;
                }
                else {
                    // Not an empty slot. Check if the keys are the same 
                    // If same keys just insert the new value
                    // If different keys move to the next slot
                    //
                    if (keys [i % keys.length] == key) {
                        
                        // replace the value
                        values [i % keys.length] = value;
                        contains = true;
                    }
                }
            }
        }
        
        if (contains == false) {
            
            if (keys[keyHashCode] == null) {
                size++;
            }
            keys[keyHashCode] = key;
            values[keyHashCode] = value;

        }
 
    
    }
    
    public TValue get(TKey key) {
        
        int keyHashCode = Math.abs(key.hashCode());
        keyHashCode %= keys.length;
        
        for (int i = keyHashCode; i < (keys.length + keyHashCode); i++) {
            
            if (keys[i % keys.length] == null) {
                return null;
            }
            
            if (keys[i % keys.length].equals(key)){
                return values[i % keys.length];
            }
        }
        
        return null;
    }
    
    public int size() {
        return size;
    }
    
    public boolean isEmpty() {
        
        return (size <= 0);
    }
    
    private void resize(int newCapacity) {
        
        TKey[] oldKeys = keys;
        TValue[] oldValues = values;
        
        this.keys = (TKey[]) new Object[newCapacity];
        this.values = (TValue[]) new Object[newCapacity];
        this.size = 0;
        
        for( int i = 0; i < oldKeys.length; i++){
            if (oldKeys [i] != null){
                put(oldKeys[i], oldValues[i]);
            }
        }
    }
}
