public class DoublyLinkedList<T> {
    static class Node<T> {
        T data;
        Node<T> next;
        Node<T> previous;
        
        Node() {
            data = null;
            next = null;
            previous = null;
        }
        
        Node(T value) {
            data = value;
            next = null;
            previous = null;
        }
    }
    
    private Node<T> head;
    private int size;
    
    public DoublyLinkedList() {
        head = null;
    }
    
    public DoublyLinkedList(T value) {
        head = new Node(value);
        size = 1;
    }
    
    public boolean isEmpty() {
        if (head == null) {
            return true;
        }
        return false;
    }
    
    public int size() {
        return size;
    }
    
    public String toString() {
        Node<T> temp = head;
        String s = "null <-- ";
        
        if (head == null){
            s = "null";
            return s;
        } else {
            while (temp.next != null) {
                s += temp.data + " <--> ";
                temp = temp.next;
            }
        s += temp.data + " --> null";
        }
        return s;
    }
    
    public T get(int index) {
        
        if (index < 0 || index >= size()) {
            throw new IndexOutOfBoundsException();
        }

        Node<T> temp = head;
        
        for (int i = 0; i < index; i++) {
            temp = temp.next;
        }

        return temp.data;
    }
    
    public boolean contains(T value) {
        Node temp = head;
        boolean found = false;

        while (temp != null && found == false) {
            if (temp.data.equals(value)) {
                found = true;
            }
            temp = temp.next;
        }

        return found;
    }
    
    public void add(T value) {
        Node temp = new Node(value);
        
        if ( head == null ) {
            head = temp;
        } else {
            Node pos = head;
            
            while ( pos.next != null ) {
                
                pos = pos.next;
            }
            pos.next = temp;
        }
        size++;
    }
    
    public void add(int index, T value) {
        if (index < 0 || index > size()) {
            throw new IndexOutOfBoundsException();
        }

        Node newNode = new Node(value);
        // add at head
        if (index == 0) {
            newNode.next = head;
            head = newNode;
        // add elsewhere
        } else {
            Node temp = head;
            for (int i = 0; i < index-1; i++) {
                temp = temp.next;
            }

            newNode.next = temp.next;
            temp.next = newNode;
        }
        size++;
    }
    
    public T remove() {
        if (head == null) {
            throw new NoSuchElementException();
        }

        T temp = head.data;
        head = head.next;

        size--;

        return temp;
    }
    
    public T remove(int index) {
        if (index < 0 || index >= size()) {
            throw new IndexOutOfBoundsException();
        }
        
        T tempData = null;
        
        if ( index == 0 ) {
            tempData = head.data;
            head = head.next;
        } else {
            Node<T> temp = head;
            for (int i = 0; i < index-1; i++) {
                temp = temp.next;
            }
    
            tempData = temp.next.data;
            temp.next = temp.next.next;
        }
        size--;
        return tempData;
    }
}
