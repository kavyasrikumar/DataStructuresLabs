public class CycleDetector {
    private boolean[] marked;     // marked[v] = whether v has been visited
    private int[] edgeTo;         // edgeTo[v] = previous vertex on path to v
    private boolean[] onStack;    // onStack[v] = whether the vertex is on the stack
    private List<Integer> cycle;  // directed cycle (or null if no such cycle)

    public CycleDetector(Digraph graph) {
        
        marked = new boolean[graph.getNumberOfVertices()];
        edgeTo = new int[graph.getNumberOfVertices()];
        onStack = new boolean[graph.getNumberOfVertices()];
        
        for (int i = 0; i < graph.getNumberOfVertices(); i++)
        {
            if (cycle == null && marked[i] == false)
            {
                dfs(graph, i);
            }
        }
        
    }
    
    private void dfs(Digraph graph, int v) {
        
        marked[v] = true;
        onStack[v] = true;
        
        for ( int current : graph.adjacent(v))
        {
            if (cycle == null)
            {
                if(marked[current] == false)
                {
                    edgeTo[current] = v;
                    dfs(graph, current);
                }
            }
            
            if (onStack[current] == true)
            {
                cycle = new ArrayList<Integer>();
                
                int i = v;
                
                while (i != current)
                {
                    cycle.add(i);
                    i = edgeTo[i];
                }
                
                cycle.add(current);
                cycle.add(v);

            }
        }
        
        onStack[v] = false;
    }
    
    /** Returns whether the directed graph contains a cycle. */
    public boolean hasCycle() {
        
        if (cycle == null)
        {
            return false;
        }
        
        return true;
    }
    
    /** Returns the vertices of a directed cycle in the graph and null if there is no cycle */
    public Iterable<Integer> cycle() {
        
        if (cycle == null){
            return null;
        } 
        
        Collections.reverse(cycle);
        return cycle;
    }
}
