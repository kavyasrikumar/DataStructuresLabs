public class ExpressionEvaluator {

    public static int eval (String expression) {
        
        Stack<Integer> valueStack = new Stack<Integer>();
        Stack<Character> operatorStack = new Stack<Character>();

        Scanner reader = new Scanner (expression);

        while (reader.hasNext() == true) 
        {

            if (reader.hasNextInt() == true) 
            {

                // push it into the value stack
                valueStack.push (reader.nextInt());
            }

            else 
            {

                // It could be operands or paranthesis
                char nextValue = reader.next().charAt(0);
                
                // Check if it is paranthesis
                if (nextValue == '(')  
                {

                    operatorStack.push(nextValue);
                }

                else if (nextValue == ')') 
                {

                    char operatorValue = operatorStack.pop();

                    // pop the values and evaluate.
                    int value2 = valueStack.pop();
            
                    int value1 = valueStack.pop();
                    // compute the value and push
                    valueStack.push(evalOperator (value1, value2, operatorValue));


                    // pop the left paranthesis
                    operatorStack.pop();

                }

                else 
                {
                    // if it is not a paranthesis and has the same or greater precedence
                    while (operatorStack.isEmpty() == false &&
                            (getOperatorLevel(operatorStack.peek()) < 3) &&
                            (operatorPrecedence(operatorStack.peek(), nextValue)))
                    {

                            char operatorValue = operatorStack.pop();

                            // pop the values and evaluate.
                            int value2 = valueStack.pop();
                    
                            int value1 = valueStack.pop();
                            // compute the value and push
                            valueStack.push(evalOperator (value1, value2, operatorValue));

                    }

                    operatorStack.push(nextValue);
                }
            }
        }
        while (operatorStack.isEmpty() == false) {

            char operatorValue = operatorStack.pop();

            // pop the values and evaluate.
            int value2 = valueStack.pop();
    
            int value1 = valueStack.pop();
            // compute the value and push
            valueStack.push(evalOperator (value1, value2, operatorValue));


        }
        reader.close();
        return valueStack.pop();

    }
    
    // Returns true if left is greater than or equal to in precedence
    private static boolean operatorPrecedence (char left, char right) 
    {
        return (getOperatorLevel(left) >= getOperatorLevel(right));
    }

    private static int getOperatorLevel (char o) {

        if (o == '(' || o == ')') {
            return 3;

        }

        if (o == '*' || o == '/') {

            return 2;

        }

        // assuming no invalid characters
        return 1;
    }

    // this does not handle paranthesis
    private static int evalOperator (int value1, int value2, char operator) {

        if (operator == '+') {

            return value1 + value2;

        }

        else if (operator == '-') {

            return value1 - value2;

        }

        else if (operator == '*') {

            return value1 * value2;

        }

        else  {

            // operator is '/'
            if (value2 == 0)
            {

                throw new UnsupportedOperationException();

            }
            
            return value1 / value2;

        }
    }
}
